// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© pmk07

//@version=5
indicator("MTF FVG", overlay=true, max_boxes_count = 500)

// General settings
changelvl = input.bool(true, "Move box levels with price touch", group='General')
changecolor = input.bool(true, "Change box color with price touch", group='General')
extend_r = input.bool(true, "Extend boxes to the right", group='General')
plotLabel = input.bool(defval=false, title='Plot OB Label', inline='FVG label', group='Style')
LabelColor = input.color(defval=color.gray, title='Color', inline='FVG label', group='Style')
LabelSize = input.string(defval=size.tiny, title="Size", options=[size.huge, size.large, size.small, size.tiny, size.auto, size.normal], inline='FVG label', group='Style')
BullColor = input.color(defval=color.new(color.green, 90), title='Bullish FVG Color', inline='Set Custom Color', group='Style')
BearColor = input.color(defval=color.new(color.red, 90), title='Bearish FVG Color', inline='Set Custom Color', group='Style')
BullColorTested = input.color(defval=color.new(color.gray, 90), title='Tested Bullish FVG Color', inline='Set Custom Color', group='Style')
BearColorTested = input.color(defval=color.new(color.gray, 90), title='Tested Bearish FVG Color', inline='Set Custom Color', group='Style')

// Proximity filter settings
proximityFilter = input.bool(true, "Enable Proximity Filter", group='Proximity Filter')
proximityPercentage = input.float(1.0, "Proximity Percentage", minval=0.1, maxval=100, step=0.1, group='Proximity Filter')
showProximityDistance = input.bool(true, "Show Distance Labels", group='Proximity Filter')
distanceColor = input.color(color.new(color.yellow, 0), "Distance Label Color", group='Proximity Filter')

// Just touch signal settings
justTouchSignal = input.bool(true, "Enable Just Touch Signal", group='Touch Signal')
touchSignalSize = input.string("Small", "Signal Size", options=["Tiny", "Small", "Normal"], group='Touch Signal')
touchBullColor = input.color(color.green, "Bull Touch Signal Color", group='Touch Signal')
touchBearColor = input.color(color.red, "Bear Touch Signal Color", group='Touch Signal')

// Arrays to store boxes and signals
var box[] bull_box = array.new_box()
var box[] bear_box = array.new_box()
var label[] touch_signals = array.new_label()
var label[] distance_labels = array.new_label()

tf1 = input.bool(false, "1", group='Timeframe')
tf2 = input.bool(false, "3", group='Timeframe')
tf3 = input.bool(false, "5", group='Timeframe')
tf4 = input.bool(true, "15", group='Timeframe')
tf5 = input.bool(false, "30", group='Timeframe')
tf6 = input.bool(false, "45", group='Timeframe')
tf7 = input.bool(true, "60", group='Timeframe')
tf8 = input.bool(false, "120", group='Timeframe')
tf9 = input.bool(false, "180", group='Timeframe')
tf10 = input.bool(true, "240", group='Timeframe')
tf11 = input.bool(true, "D", group='Timeframe')
tf12 = input.bool(true, "W", group='Timeframe')

// Function to calculate distance in percentage between price and FVG level
calculate_distance(price, fvg_level) =>
    math.abs(price - fvg_level) / price * 100

// Function to find Fair Value Gaps
find_box(t) =>
    var int x = na
    var float _top = na
    var float _bottom = na
    var int _time = na
    if barstate.isconfirmed
        x := low[2] >= high ? -1 : low >= high[2] ? 1 : 0
        _top := x > 0 ? low : x < 0 ? low[2] : 0
        _bottom := x > 0 ? high[2] : x < 0 ? high : 0
        _time := time - t * 60000 * 2
    [_time, _top, _bottom, x]

// Function to create FVG boxes
create_box(_time, _top, _bottom, x, TF) =>
    _col = x > 0 ? BullColor : BearColor
    _extend = extend_r ? extend.right : extend.none
    _text = plotLabel ? TF : na
    box boxOB = na
    if x != 0
        boxOB := box.new(left=_time, top=_top, right=time, extend=_extend, bottom=_bottom, bgcolor=_col, border_color=na, text=_text, text_halign=text.align_right, text_size=LabelSize, text_color=LabelColor, xloc=xloc.bar_time)
    if x > 0
        array.push(bull_box, boxOB)
    if x < 0
        array.push(bear_box, boxOB)

// Clean up old labels
clean_old_labels(label_array) =>
    if array.size(label_array) > 20
        for i = 0 to 9
            label.delete(array.shift(label_array))

// Function to check if price is touching an FVG
is_price_touching(fvg_high, fvg_low, price_high, price_low) =>
    // Price candle or wick is exactly at the FVG boundary or crossing it
    (price_low <= fvg_high and price_high >= fvg_high) or 
    (price_high >= fvg_low and price_low <= fvg_low) or
    (price_low <= fvg_low and price_high >= fvg_high)

// Function to control boxes and handle touch/proximity signals
control_box(_boxes, bearbull) => 
    if array.size(_boxes) > 0
        current_price = close
        current_high = high
        current_low = low
        
        for i = array.size(_boxes) - 1 to 0 by 1
            _box = array.get(_boxes, i)
            if na(_box)
                continue
                
            _boxLow = box.get_bottom(_box)
            _boxHigh = box.get_top(_box)
            
            // Calculate distance from price to FVG boundary
            distance = bearbull > 0 ? 
                calculate_distance(current_price, _boxHigh) : 
                calculate_distance(current_price, _boxLow)
            
            // Check if price is touching the FVG (for just touch signal)
            if justTouchSignal
                is_touching = is_price_touching(_boxHigh, _boxLow, current_high, current_low)
                
                if is_touching
                    signal_text = bearbull > 0 ? "Bull FVG Touch" : "Bear FVG Touch"
                    signal_color = bearbull > 0 ? touchBullColor : touchBearColor
                    signal_size = touchSignalSize == "Tiny" ? size.tiny : 
                                  touchSignalSize == "Small" ? size.small : size.normal
                    
                    signal_y = bearbull > 0 ? _boxHigh : _boxLow
                    touch_label = label.new(
                        bar_index, 
                        signal_y, 
                        signal_text, 
                        color=signal_color, 
                        style=bearbull > 0 ? label.style_label_down : label.style_label_up,
                        textcolor=color.white,
                        size=signal_size)
                    array.push(touch_signals, touch_label)
            
            // Show distance label for proximity filter
            if proximityFilter and showProximityDistance
                // Only show distance for FVGs that are within the proximity percentage
                if distance <= proximityPercentage
                    distance_text = str.tostring(distance, "#.##") + "%"
                    distance_y = bearbull > 0 ? _boxHigh : _boxLow
                    
                    dist_label = label.new(
                        bar_index + 2,
                        distance_y,
                        distance_text,
                        color=distanceColor,
                        style=label.style_none,
                        textcolor=color.white,
                        size=size.small)
                    array.push(distance_labels, dist_label)
                    
                    // Keep the box visible with normal colors
                    box.set_bgcolor(_box, bearbull > 0 ? 
                        (box.get_bgcolor(_box) == BullColorTested ? BullColorTested : BullColor) : 
                        (box.get_bgcolor(_box) == BearColorTested ? BearColorTested : BearColor))
                else
                    // If not in proximity range, make the box transparent
                    box.set_bgcolor(_box, color.new(box.get_bgcolor(_box), 95))
            
            // Check if FVG should be removed based on price movement
            if (bearbull > 0 and current_low < _boxLow) or (bearbull < 0 and current_high > _boxHigh)
                box.delete(_box)
                array.set(_boxes, i, na)
            else 
                // Handle price touching the FVG
                if bearbull > 0 and current_low < _boxHigh
                    if changelvl
                        box.set_top(_box, current_low)
                    if changecolor
                        box.set_bgcolor(_box, BullColorTested)
                if bearbull < 0 and current_high > _boxLow
                    if changelvl
                        box.set_bottom(_box, current_high)
                    if changecolor
                        box.set_bgcolor(_box, BearColorTested)
                box.set_right(_box, time)
                
    // Clean up array of deleted boxes
    if array.size(_boxes) > 0 
        for i = array.size(_boxes) - 1 to 0 by 1
            if na(array.get(_boxes, i))
                array.remove(_boxes, i)

// Clean up old signals
clean_old_labels(touch_signals)
clean_old_labels(distance_labels)

// Request security for each timeframe
[_time1, _top1, _bottom1, xtf1]  = request.security(syminfo.tickerid, "1", find_box(1), lookahead=barmerge.lookahead_off)
[_time2, _top2, _bottom2, xtf2]  = request.security(syminfo.tickerid, "3", find_box(3), lookahead=barmerge.lookahead_off)
[_time3, _top3, _bottom3, xtf3]  = request.security(syminfo.tickerid, "5", find_box(5), lookahead=barmerge.lookahead_off)
[_time4, _top4, _bottom4, xtf4]  = request.security(syminfo.tickerid, "15", find_box(15), lookahead=barmerge.lookahead_off)
[_time5, _top5, _bottom5, xtf5]  = request.security(syminfo.tickerid, "30", find_box(30), lookahead=barmerge.lookahead_off)
[_time6, _top6, _bottom6, xtf6]  = request.security(syminfo.tickerid, "45", find_box(45), lookahead=barmerge.lookahead_off)
[_time7, _top7, _bottom7, xtf7]  = request.security(syminfo.tickerid, "60", find_box(60), lookahead=barmerge.lookahead_off)
[_time8, _top8, _bottom8, xtf8]  = request.security(syminfo.tickerid, "120", find_box(120), lookahead=barmerge.lookahead_off)
[_time9, _top9, _bottom9, xtf9]  = request.security(syminfo.tickerid, "180", find_box(180), lookahead=barmerge.lookahead_off)
[_time10, _top10, _bottom10, xtf10]  = request.security(syminfo.tickerid, "240", find_box(240), lookahead=barmerge.lookahead_off)
[_time11, _top11, _bottom11, xtf11]  = request.security(syminfo.tickerid, "D", find_box(1440), lookahead=barmerge.lookahead_off)
[_time12, _top12, _bottom12, xtf12]  = request.security(syminfo.tickerid, "W", find_box(10080), lookahead=barmerge.lookahead_off)

// Create boxes on timeframe change
if tf1 and timeframe.change("1")
    create_box(_time1, _top1, _bottom1, xtf1, "1")
if tf2 and timeframe.change("3")
    create_box(_time2, _top2, _bottom2, xtf2, "3")
if tf3 and timeframe.change("5")
    create_box(_time3, _top3, _bottom3, xtf3, "5")
if tf4 and timeframe.change("15")
    create_box(_time4, _top4, _bottom4, xtf4, "15")
if tf5 and timeframe.change("30")
    create_box(_time5, _top5, _bottom5, xtf5, "30")
if tf6 and timeframe.change("45")
    create_box(_time6, _top6, _bottom6, xtf6, "45")
if tf7 and timeframe.change("60")
    create_box(_time7, _top7, _bottom7, xtf7, "60")
if tf8 and timeframe.change("120")
    create_box(_time8, _top8, _bottom8, xtf8, "120")
if tf9 and timeframe.change("180")
    create_box(_time9, _top9, _bottom9, xtf9, "180")
if tf10 and timeframe.change("240")
    create_box(_time10, _top10, _bottom10, xtf10, "240")
if tf11 and timeframe.change("D")
    create_box(_time11, _top11, _bottom11, xtf11, "D")
if tf12 and timeframe.change("W")
    create_box(_time12, _top12, _bottom12, xtf12, "W")

// Control boxes
control_box(bull_box, 1)
control_box(bear_box, -1)

// Status indicators
var table status_table = table.new(position.top_right, 2, 2, color.new(color.black, 70), border_width=1)
if barstate.islast
    table.cell(status_table, 0, 0, "Proximity Filter:", text_color=color.white, bgcolor=color.new(color.blue, 70))
    table.cell(status_table, 1, 0, proximityFilter ? "ON (" + str.tostring(proximityPercentage, "#.#") + "%)" : "OFF", 
               text_color=color.white, bgcolor=proximityFilter ? color.green : color.gray)
    table.cell(status_table, 0, 1, "Touch Signal:", text_color=color.white, bgcolor=color.new(color.blue, 70))
    table.cell(status_table, 1, 1, justTouchSignal ? "ON" : "OFF", 
               text_color=color.white, bgcolor=justTouchSignal ? color.green : color.gray)

// Add alerts
alertcondition(justTouchSignal and array.size(touch_signals) > array.size(touch_signals[1]), "FVG Touch Alert", "Price touched an FVG!")
alertcondition(proximityFilter and array.size(distance_labels) > array.size(distance_labels[1]), "FVG Proximity Alert", "Price is within {{proximityPercentage}}% of an FVG!")